module atsamd21g18a.wdt;

import atsamd21g18a.mmio;

/*****************************************************************************
 Watchdog Timer
*/
final abstract class WDT : Peripheral!(0x40001000)
{
    /*************************************************************************
     Clear
    */
    final abstract class CLEAR : Register!(0x8)
    {
        /*********************************************************************
         Watchdog Clear
        */
        final abstract class CLEAR
        {
            /*****************************************************************
             CLEAR's possible values
            */
            enum Values
            {
                /*************************************************************
                 Clear Key
                */
                KEY = 0xa5,
            }
            mixin BitFieldImplementation!(7, 0, Mutability.w, values);
        }
    }

    /*************************************************************************
     Configuration
    */
    final abstract class CONFIG : Register!(0x1)
    {
        /*********************************************************************
         Time-Out Period
        */
        final abstract class PER
        {
            /*****************************************************************
             PER's possible values
            */
            enum Values
            {
                /*************************************************************
                 8 clock cycles
                */
                0x0 = 0x0,

                /*************************************************************
                 16 clock cycles
                */
                0x1 = 0x1,

                /*************************************************************
                 32 clock cycles
                */
                0x2 = 0x2,

                /*************************************************************
                 64 clock cycles
                */
                0x3 = 0x3,

                /*************************************************************
                 128 clock cycles
                */
                0x4 = 0x4,

                /*************************************************************
                 256 clock cycles
                */
                0x5 = 0x5,

                /*************************************************************
                 512 clock cycles
                */
                0x6 = 0x6,

                /*************************************************************
                 1024 clock cycles
                */
                0x7 = 0x7,

                /*************************************************************
                 2048 clock cycles
                */
                0x8 = 0x8,

                /*************************************************************
                 4096 clock cycles
                */
                0x9 = 0x9,

                /*************************************************************
                 8192 clock cycles
                */
                0xA = 0xa,

                /*************************************************************
                 16384 clock cycles
                */
                0xB = 0xb,
            }
            mixin BitFieldImplementation!(3, 0, Mutability.rw, values);
        }

        /*********************************************************************
         Window Mode Time-Out Period
        */
        final abstract class WINDOW
        {
            /*****************************************************************
             WINDOW's possible values
            */
            enum Values
            {
                /*************************************************************
                 8 clock cycles
                */
                0x0 = 0x0,

                /*************************************************************
                 16 clock cycles
                */
                0x1 = 0x1,

                /*************************************************************
                 32 clock cycles
                */
                0x2 = 0x2,

                /*************************************************************
                 64 clock cycles
                */
                0x3 = 0x3,

                /*************************************************************
                 128 clock cycles
                */
                0x4 = 0x4,

                /*************************************************************
                 256 clock cycles
                */
                0x5 = 0x5,

                /*************************************************************
                 512 clock cycles
                */
                0x6 = 0x6,

                /*************************************************************
                 1024 clock cycles
                */
                0x7 = 0x7,

                /*************************************************************
                 2048 clock cycles
                */
                0x8 = 0x8,

                /*************************************************************
                 4096 clock cycles
                */
                0x9 = 0x9,

                /*************************************************************
                 8192 clock cycles
                */
                0xA = 0xa,

                /*************************************************************
                 16384 clock cycles
                */
                0xB = 0xb,
            }
            mixin BitFieldImplementation!(7, 4, Mutability.rw, values);
        }
    }

    /*************************************************************************
     Control
    */
    final abstract class CTRL : Register!(00)
    {
        /*********************************************************************
         Enable
        */
        alias ENABLE = Bit!(1, Mutability.rw);

        /*********************************************************************
         Watchdog Timer Window Mode Enable
        */
        alias WEN = Bit!(2, Mutability.rw);

        /*********************************************************************
         Always-On
        */
        alias ALWAYSON = Bit!(7, Mutability.rw);
    }

    /*************************************************************************
     Early Warning Interrupt Control
    */
    final abstract class EWCTRL : Register!(0x2)
    {
        /*********************************************************************
         Early Warning Interrupt Time Offset
        */
        final abstract class EWOFFSET
        {
            /*****************************************************************
             EWOFFSET's possible values
            */
            enum Values
            {
                /*************************************************************
                 8 clock cycles
                */
                0x0 = 0x0,

                /*************************************************************
                 16 clock cycles
                */
                0x1 = 0x1,

                /*************************************************************
                 32 clock cycles
                */
                0x2 = 0x2,

                /*************************************************************
                 64 clock cycles
                */
                0x3 = 0x3,

                /*************************************************************
                 128 clock cycles
                */
                0x4 = 0x4,

                /*************************************************************
                 256 clock cycles
                */
                0x5 = 0x5,

                /*************************************************************
                 512 clock cycles
                */
                0x6 = 0x6,

                /*************************************************************
                 1024 clock cycles
                */
                0x7 = 0x7,

                /*************************************************************
                 2048 clock cycles
                */
                0x8 = 0x8,

                /*************************************************************
                 4096 clock cycles
                */
                0x9 = 0x9,

                /*************************************************************
                 8192 clock cycles
                */
                0xA = 0xa,

                /*************************************************************
                 16384 clock cycles
                */
                0xB = 0xb,
            }
            mixin BitFieldImplementation!(3, 0, Mutability.rw, values);
        }
    }

    /*************************************************************************
     Interrupt Enable Clear
    */
    final abstract class INTENCLR : Register!(0x4)
    {
        /*********************************************************************
         Early Warning Interrupt Enable
        */
        alias EW = Bit!(0, Mutability.rw);
    }

    /*************************************************************************
     Interrupt Enable Set
    */
    final abstract class INTENSET : Register!(0x5)
    {
        /*********************************************************************
         Early Warning Interrupt Enable
        */
        alias EW = Bit!(0, Mutability.rw);
    }

    /*************************************************************************
     Interrupt Flag Status and Clear
    */
    final abstract class INTFLAG : Register!(0x6)
    {
        /*********************************************************************
         Early Warning
        */
        alias EW = Bit!(0, Mutability.rw);
    }

    /*************************************************************************
     Status
    */
    final abstract class STATUS : Register!(0x7)
    {
        /*********************************************************************
         Synchronization Busy
        */
        alias SYNCBUSY = Bit!(7, Mutability.r);
    }
}
